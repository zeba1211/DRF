"""
Django settings for companyapi project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-49v*wt0qnk5eb0zj+d($vdx-n9^v225o1bd2hp4z-ji6p5(9qb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'api',
    'silk',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'silk.middleware.SilkyMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'companyapi.middleware.SilkAccessMiddleware',
    
]

ROOT_URLCONF = 'companyapi.urls'
import os
BASE_DIR = Path(__file__).resolve().parent.parent
# STATIC_URL='/static/'
# STATIC_ROOT=os.path.join(BASE_DIR,'staticfiles')
# STATICFILES_DIRS=[
#     os.path.join(BASE_DIR,"static"),
# ]
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'companyapi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#throttling setting for employee to list and create
REST_FRAMEWORK={
    'DEFAULT_THROTTLE_RATES':{
        'anon': '100/day',
        'user': '100/day',
        'emp':'100/hour',

    }
}


#logging implementation


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'file': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': 'requests.log',

#         },
#         'console': {
#             'level': 'INFO',
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         '': {
#             'handlers': ['file','console'],
#             'level': 'INFO',
#             'propagate': True,
#         },
#     },
# }


# You can set a maximum limit for the number of queries Silk will track.
SILKY_MAX_QUERIES = 50  # Only track and display the first 50 queries for each request

# Optionally, limit how many SQL queries are considered "slow" (in milliseconds)
SILKY_SLOW_QUERY_THRESHOLD_MS = 500  # Queries taking longer than 500ms will be considered slow

# Enabling query profiling
SILKY_INTERCEPT_COLLECTORS = True  # This collects data on the SQL queries

# Optional settings to adjust what Silk tracks:
SILKY_LOG_QUERY_STRING = True  # Log the query string (not just the SQL)
SILKY_TRACK_DATABASE_QUERY_COST = True  # Track cost of SQL queries if applicable

# You can control the granularity of the profiling
SILKY_MAX_REQUESTS = 100  # Set the max number of requests to track in memory for profiling

SILKY_INTERCEPT_PERCENT=100 #capture 100% of request
SILKY_PYTHON_PROFILE=True #enable function profiling
SILK_ENABLED = True
